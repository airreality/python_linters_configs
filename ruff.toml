target-version = "py312"
line-length = 120

[lint]
select = [

    # UNIVERSAL:

    "F",  # Pyflakes
    "W",  # pycodestyle warning
    "E",  # pycodestyle error
    "C90",  # mccabe
    "I",  # isort
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP",  # pyupgrade
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "PGH",  # pygrep-hooks
    "PL",  # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF",  # Perflint
    "FURB",  # refurb
    "RUF",  # Ruff-specific rules

    # OPTIONAL:

    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ASYNC",  # flake8-async
    "S",  # flake8-bandit
    "DTZ",  # flake8-datetimez
    "NPY",  # NumPy-specific rules
    "PD",  # pandas-vet
    "PT",  # flake8-pytest-style

    # IGNORE:

    "COM", # flake8-commas
    "CPY",  # flake8-copyright
    "T10",  # flake8-debugger
    "DJ",  # flake8-django
    "T20",  # flake8-print
    "TD",  # flake8-todos
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "AIR",  # Airflow
]

ignore = [
    "D10",    # Undocumented
    "PT004",  # https://github.com/astral-sh/ruff/issues/8796
    "PT005",  # https://github.com/astral-sh/ruff/issues/8796
    "PT007",  # Wrong values type in `@pytest.mark.parametrize` expected `list` of `tuple`
    "PT019",  # Fixture without value is injected as parameter, use `@pytest.mark.usefixtures` instead
    "S101",   # Use of `assert` detected
]

[lint.per-file-ignores]
"tests/*" = [
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
    "ARG004",  # Unused static method argument
    "FBT001",  # Boolean-typed positional argument in function definition
]
"tests/unit/*" = [
    "PLC0415",  # `import` should be at the top-level of a file
    "PLR0917",  # Too many positional arguments
    "PLC2701",  # Private name import from external module
]

[lint.isort]
force-single-line = false
order-by-type = false
required-imports = ["from __future__ import annotations"]

[lint.pydocstyle]
# https://github.com/astral-sh/ruff/issues/6606
# convention = "sphinx"
convention = "google"
